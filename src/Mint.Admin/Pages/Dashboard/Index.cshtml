@page
@model IndexModel
@{
    ViewData["Title"] = "Дашборд";
}

<div class="container">
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1 class="m-0">Дашборд</h1>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-3 col-6">
            <div class="small-box bg-info">
                <div class="inner">
                    <h3>150</h3>
                    <p>Новые Заказы</p>
                </div>
                <div class="icon">
                    <i class="bi bi-table bi-table-2"></i>
                </div>
                <a href="#" class="small-box-footer bg-info-2">More info <i class="bi bi-arrow-right-circle"></i></a>
            </div>
        </div>
        <div class="col-lg-3 col-6">
            <div class="small-box bg-success">
                <div class="inner">
                    <h3>53<sup style="font-size: 20px">%</sup></h3>
                    <p data-toggle="tooltip" data-placement="top" title="Тут считается сколько из 100 пользователей добавили товар в избранное">Добавлено в Избранное <i class="bi bi-question-circle"></i></p>
                </div>
                <div class="icon">
                    <i class="bi bi-heart"></i>
                </div>
                <a href="#" class="small-box-footer bg-success-2">More info <i class="bi bi-arrow-right-circle"></i></a>
            </div>
        </div>
        <div class="col-lg-3 col-6">
            <div class="small-box bg-warning">
                <div class="inner">
                    <h3>44</h3>
                    <p>Новые Регистрации</p>
                </div>
                <div class="icon">
                    <i class="bi bi-person-plus"></i>
                </div>
                <a href="#" class="small-box-footer bg-warning-2">More info <i class="bi bi-arrow-right-circle"></i></a>
            </div>
        </div>
        <div class="col-lg-3 col-6">
            <div class="small-box bg-danger">
                <div class="inner">
                    <h3>65</h3>
                    <p>Уникальные Посетители</p>
                </div>
                <div class="icon">
                    <i class="bi bi-pie-chart-fill"></i>
                </div>
                <a href="#" class="small-box-footer bg-danger-2">More info <i class="bi bi-arrow-right-circle"></i></a>
            </div>
        </div>
    </div>

    <style>
        .drag-list {
            overflow: hidden;
            margin: 10px auto;
            border: 1px solid #ccc;
        }

        .drag-item {
            float: left;
            padding: 50px 20px;
            width: 25%;
            text-align: center;
            color: #555;
            background: #ddd;
            border: 1px solid #ccc;
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
            -webkit-transition: 0.25s;
            -moz-transition: 0.25s;
            -o-transition: 0.25s;
            transition: 0.25s;
        }

        [draggable] {
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }
    </style>

    <div class="drag-list">
        <div class="drag-item" draggable="true">A</div>
        <div class="drag-item" draggable="true">B</div>
        <div class="drag-item" draggable="true">C</div>
        <div class="drag-item" draggable="true">D</div>
    </div>
</div>

<script>
    function DragNSort(config) {
        this.$activeItem = null;
        this.$container = config.container;
        this.$items = this.$container.querySelectorAll('.' + config.itemClass);
        this.dragStartClass = config.dragStartClass;
        this.dragEnterClass = config.dragEnterClass;
    }

    DragNSort.prototype.removeClasses = function () {
        [].forEach.call(this.$items, function ($item) {
            $item.classList.remove(this.dragStartClass, this.dragEnterClass);
        }.bind(this));
    };

    DragNSort.prototype.on = function (elements, eventType, handler) {
        [].forEach.call(elements, function (element) {
            element.addEventListener(eventType, handler.bind(element, this), false);
        }.bind(this));
    };

    DragNSort.prototype.onDragStart = function (_this, event) {
        _this.$activeItem = this;

        this.classList.add(_this.dragStartClass);
        event.dataTransfer.effectAllowed = 'move';
        event.dataTransfer.setData('text/html', this.innerHTML);
    };

    DragNSort.prototype.onDragEnd = function (_this) {
        this.classList.remove(_this.dragStartClass);
    };

    DragNSort.prototype.onDragEnter = function (_this) {
        this.classList.add(_this.dragEnterClass);
    };

    DragNSort.prototype.onDragLeave = function (_this) {
        this.classList.remove(_this.dragEnterClass);
    };

    DragNSort.prototype.onDragOver = function (_this, event) {
        if (event.preventDefault) {
            event.preventDefault();
        }

        event.dataTransfer.dropEffect = 'move';

        return false;
    };

    DragNSort.prototype.onDrop = function (_this, event) {
        if (event.stopPropagation) {
            event.stopPropagation();
        }

        if (_this.$activeItem !== this) {
            _this.$activeItem.innerHTML = this.innerHTML;
            this.innerHTML = event.dataTransfer.getData('text/html');
        }

        _this.removeClasses();

        return false;
    };

    DragNSort.prototype.bind = function () {
        this.on(this.$items, 'dragstart', this.onDragStart);
        this.on(this.$items, 'dragend', this.onDragEnd);
        this.on(this.$items, 'dragover', this.onDragOver);
        this.on(this.$items, 'dragenter', this.onDragEnter);
        this.on(this.$items, 'dragleave', this.onDragLeave);
        this.on(this.$items, 'drop', this.onDrop);
    };

    DragNSort.prototype.init = function () {
        this.bind();
    };

    // Instantiate
    var draggable = new DragNSort({
        container: document.querySelector('.drag-list'),
        itemClass: 'drag-item',
        dragStartClass: 'drag-start',
        dragEnterClass: 'drag-enter'
    });
    draggable.init();
</script>