// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mint.Infrastructure;

#nullable disable

namespace Mint.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Mint.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa260391-177a-45b1-9c69-143b5c857b66"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("beab503a-f069-4501-a2d3-f76c306b65ac"),
                            Name = "Buyer"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfirmedPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsActiveAccount")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("NumOfAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01064f77-0f87-40f8-9c69-fbd3f59b7186"),
                            ConfirmedPassword = "QWJ1YWtyTWlyZ2l5YXNvdkApKSFN",
                            CreatedDate = new DateTime(2022, 10, 7, 17, 55, 20, 70, DateTimeKind.Local).AddTicks(6458),
                            Email = "abubakrmirgiyasov@gmail.com",
                            FirstName = "Миргиясов",
                            IsActiveAccount = true,
                            LastName = "Мукимжонович",
                            NumOfAttempts = 0,
                            Password = "QWJ1YWtyTWlyZ2l5YXNvdkApKSFN",
                            Phone = 89502768428L,
                            RoleId = new Guid("fa260391-177a-45b1-9c69-143b5c857b66"),
                            SecondName = "Абубакр"
                        },
                        new
                        {
                            Id = new Guid("5ce936cc-d459-4ff1-808f-4cd8bccf557f"),
                            ConfirmedPassword = "dGVzdF8x",
                            CreatedDate = new DateTime(2022, 10, 7, 17, 55, 20, 70, DateTimeKind.Local).AddTicks(6494),
                            Email = "test@gmail.com",
                            FirstName = "Test",
                            IsActiveAccount = true,
                            LastName = "",
                            NumOfAttempts = 0,
                            Password = "dGVzdF8x",
                            Phone = 89502768428L,
                            RoleId = new Guid("fa260391-177a-45b1-9c69-143b5c857b66"),
                            SecondName = "User"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.User", b =>
                {
                    b.HasOne("Mint.Domain.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Mint.Domain.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
