// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mint.Infrastructure;

#nullable disable

namespace Mint.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Mint.Domain.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Home")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PostCode")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c914d98-996d-469d-b036-239c390f9181"),
                            City = "Новокузнецк",
                            CountryId = new Guid("74716b77-27c7-4931-9b10-d5952e1c7e39"),
                            Description = "г. Новокузнецк ул. Бардина 23, ком. 302",
                            Home = "302",
                            PostCode = 640000,
                            Street = "Бардина 23"
                        },
                        new
                        {
                            Id = new Guid("9b708e84-a2f4-4d7b-a5ef-c3b766ac4d45"),
                            City = "Test",
                            CountryId = new Guid("74716b77-27c7-4931-9b10-d5952e1c7e39"),
                            Description = "г. Test Street, ком. 302",
                            Home = "302",
                            PostCode = 123456,
                            Street = "Street"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfirmedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumOfAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e05be4a-3e34-4a51-a0e0-eb2dce1d9dd7"),
                            AddressId = new Guid("6c914d98-996d-469d-b036-239c390f9181"),
                            ConfirmedPassword = "QWJ1YWtyTWlyZ2l5YXNvdkApKSFN",
                            Email = "abubakrmirgiyasov@gmail.com",
                            FirstName = "Миргиясов",
                            IsActive = true,
                            LastName = "Мукимжонович",
                            NumOfAttempts = 0,
                            Password = "QWJ1YWtyTWlyZ2l5YXNvdkApKSFN",
                            Phone = 89502768428L,
                            RoleId = new Guid("bcf66b8c-3692-48ad-9729-4f88ea59e43d"),
                            SecondName = "Абубакр"
                        },
                        new
                        {
                            Id = new Guid("68db30fe-e377-4d4b-88d0-2a6cc84eb690"),
                            AddressId = new Guid("9b708e84-a2f4-4d7b-a5ef-c3b766ac4d45"),
                            ConfirmedPassword = "dGVzdF8x",
                            Email = "test@gmail.com",
                            FirstName = "Test",
                            IsActive = true,
                            NumOfAttempts = 0,
                            Password = "dGVzdF8x",
                            Phone = 89502768529L,
                            RoleId = new Guid("bcf66b8c-3692-48ad-9729-4f88ea59e43d"),
                            SecondName = "User"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7a71dd1-44ca-401f-bf9b-3adadcaa81d4"),
                            CategoryId = new Guid("478b218c-6ceb-4a32-a745-f3d396dba216"),
                            Name = "Samsung"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("478b218c-6ceb-4a32-a745-f3d396dba216"),
                            Name = "Смартфоны"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74716b77-27c7-4931-9b10-d5952e1c7e39"),
                            Name = "Россия"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("FileBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FileSize")
                        .HasColumnType("float");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Mint.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcf66b8c-3692-48ad-9729-4f88ea59e43d"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("a93076fe-d364-472f-8146-2abd15e980c8"),
                            Name = "Buyer"
                        },
                        new
                        {
                            Id = new Guid("e1a1ad98-a384-477e-bed5-45280591f624"),
                            Name = "Deliver"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8097bc6-b167-4fcc-8128-c7aeee884f1b"),
                            CategoryId = new Guid("478b218c-6ceb-4a32-a745-f3d396dba216"),
                            Name = "Samsung Galaxy"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfirmedPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActiveAccount")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("NumOfAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2cac7cd2-6a1c-4e58-81fc-5c4272094633"),
                            AddressId = new Guid("6c914d98-996d-469d-b036-239c390f9181"),
                            ConfirmedPassword = "QWJ1YWtyTWlyZ2l5YXNvdkApKSFN",
                            CreatedDate = new DateTime(2022, 12, 15, 16, 25, 59, 235, DateTimeKind.Local).AddTicks(6786),
                            Email = "abubakrmirgiyasov@gmail.com",
                            FirstName = "Миргиясов",
                            Ip = "127.0.0.1",
                            IsActiveAccount = true,
                            LastName = "Мукимжонович",
                            NumOfAttempts = 0,
                            Password = "QWJ1YWtyTWlyZ2l5YXNvdkApKSFN",
                            Phone = 89502768428L,
                            RoleId = new Guid("bcf66b8c-3692-48ad-9729-4f88ea59e43d"),
                            SecondName = "Абубакр"
                        },
                        new
                        {
                            Id = new Guid("684dc365-f4ac-4afc-b053-532865669377"),
                            AddressId = new Guid("6c914d98-996d-469d-b036-239c390f9181"),
                            ConfirmedPassword = "dGVzdF8x",
                            CreatedDate = new DateTime(2022, 12, 15, 16, 25, 59, 235, DateTimeKind.Local).AddTicks(6844),
                            Email = "test@gmail.com",
                            FirstName = "Test",
                            Ip = "127.0.0.1",
                            IsActiveAccount = true,
                            NumOfAttempts = 0,
                            Password = "dGVzdF8x",
                            Phone = 89502768529L,
                            RoleId = new Guid("bcf66b8c-3692-48ad-9729-4f88ea59e43d"),
                            SecondName = "User"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Address", b =>
                {
                    b.HasOne("Mint.Domain.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin", b =>
                {
                    b.HasOne("Mint.Domain.Models.Address", "Address")
                        .WithMany("Admins")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mint.Domain.Models.Role", "Role")
                        .WithMany("Admins")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Address");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Mint.Domain.Models.Brand", b =>
                {
                    b.HasOne("Mint.Domain.Models.Category", "Category")
                        .WithMany("Brands")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Mint.Domain.Models.Photo", b =>
                {
                    b.HasOne("Mint.Domain.Models.Admin", "Admin")
                        .WithMany("Photos")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mint.Domain.Models.Brand", "Brand")
                        .WithMany("Photos")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mint.Domain.Models.Category", "Category")
                        .WithMany("Photos")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mint.Domain.Models.SubCategory", "SubCategory")
                        .WithMany("Photos")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mint.Domain.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Admin");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mint.Domain.Models.SubCategory", b =>
                {
                    b.HasOne("Mint.Domain.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Mint.Domain.Models.User", b =>
                {
                    b.HasOne("Mint.Domain.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mint.Domain.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Address");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Mint.Domain.Models.Address", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Mint.Domain.Models.Brand", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Mint.Domain.Models.Category", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("Photos");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Mint.Domain.Models.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Mint.Domain.Models.Role", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Mint.Domain.Models.SubCategory", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Mint.Domain.Models.User", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
